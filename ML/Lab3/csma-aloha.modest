const int PACKETS; // total number of packets to send in one simulation run
const real P =0.25; // probability p for the Aloha variants

patient action send_start, send_stop;

int packetsSent; // have each node increment this variable whenever it has sent a packet successfully (i.e. 1 time unit without collision)
int[4] packetsToSend; // packetsToSend[i] is the number of packets available to send by node i; have node i decrement it as necessary (e.g. whenever it has successfully sent a packet)
int[4] signals; // signals[i] is the number of transmissions currently being sensed at node i (i.e. signals[i] > 1 means that there is a collision); the value must only be changed by the SharedMedium process
int[4] maxSignals; // maxSignals[i] is the maximum number of transmissions that have been sensed at node i since the start of the last transmission (to detect, at the end of a transmission, whether a collision occurred during the transmission); the value must only be changed by the SharedMedium process

/* Do not change anything between the start of the file and this line */

// Properties
clock t;
property AllSent = Xmax(t | packetsSent == PACKETS);

// Models the multiple access protocol of node i;
// use send_start to start a transmission (but only if packetsToSend[i] > 0)
// and send_stop to stop transmitting (but no sooner than 0.5 time units after send_start)
process Node(int i)
{
    bool retransmit = false; //to safe wether we need to retransmit
    bool sending = false; // to safe wether we are currently in "sending" state
    clock t; //for time based actions (sending the send_stop after 1 time unit)
    real waitTime = 0;
    do {
        // if there are packets to send and we do not sense anyone else sending, and are not sending ourself
        :: when urgent (packetsToSend[i] > 0
            && signals[i] == 0 
            && (!sending) 
            && (!retransmit || (retransmit && t >= waitTime))
        )
                    //probabilistic alternativ as given in the problem description for Aloa
            send_start {= sending = true, t = 0 =} //if we do the retransmit, then safe sending state and reset timer

        //if we are sending and one time unit has passed
        :: when urgent (sending && t >= 1.0) 
            send_stop //stop sending and
            {=
					t= 0,
                sending = false, //safe that we are not sending
                //note that condition must always be maxSignals[i] > 1 as modest does not have "imperative semantics" and uses the "old" value of retransmit for the right hand sides in this block
                retransmit = (maxSignals[i] > 1),   //a retransmit is necessary if there was a collision while sending
                packetsSent += (maxSignals[i] > 1) ? 0 : 1, //increment the send packets if there was no collision
                packetsToSend[i] -= (maxSignals[i] > 1) ? 0 : 1, // decrement packets that need to be send under the same condition
                waitTime = Geometric(P)
            =}
    }
}

/* Do not change anything between this line and the end of the file */

// Models the upper layers of all nodes in one process
process UpperLayers(int remainingPackets)
{
	when urgent(remainingPackets > 0) {= packetsToSend[DiscreteUniform(0, 3)]++, remainingPackets-- =};
	delay(Exponential(1)) tau;
	UpperLayers(remainingPackets)
}

// Models the physical-layer influence by node i; note the signal propagation time of up to 0.2 time units
process SharedMedium(int i)
{
	clock c;
	clock c1; real x1;
	clock c2; real x2;
	
	par {
	::	do {
		when urgent(c1 >= x1) send_start {= c = 0, c1 = 0, x1 = Uniform(0.025, 0.05), maxSignals[i] = 0 =};
		when urgent(c1 >= x1) {= signals[(i + 0) % 4]++, maxSignals[(i + 0) % 4] = max(maxSignals[(i + 0) % 4], signals[(i + 0) % 4] + 1), c1 = 0, x1 = Uniform(0.025, 0.05) =};
		when urgent(c1 >= x1) {= signals[(i + 1) % 4]++, maxSignals[(i + 1) % 4] = max(maxSignals[(i + 1) % 4], signals[(i + 1) % 4] + 1), c1 = 0, x1 = Uniform(0.025, 0.05) =};
		when urgent(c1 >= x1) {= signals[(i + 2) % 4]++, maxSignals[(i + 2) % 4] = max(maxSignals[(i + 2) % 4], signals[(i + 2) % 4] + 1), c1 = 0, x1 = Uniform(0.025, 0.05) =};
		when urgent(c1 >= x1) {= signals[(i + 3) % 4]++, maxSignals[(i + 3) % 4] = max(maxSignals[(i + 3) % 4], signals[(i + 3) % 4] + 1), c1 = 0, x1 = Uniform(0.025, 0.05) =}
		}
	::	do {
		when urgent(c >= 0.5) send_stop {= c2 = 0, x2 = Uniform(0.025, 0.05) =};
		when urgent(c2 >= x2) {= signals[(i + 0) % 4]--, c2 = 0, x2 = Uniform(0.025, 0.05) =};
		when urgent(c2 >= x2) {= signals[(i + 1) % 4]--, c2 = 0, x2 = Uniform(0.025, 0.05) =};
		when urgent(c2 >= x2) {= signals[(i + 2) % 4]--, c2 = 0, x2 = Uniform(0.025, 0.05) =};
		when urgent(c2 >= x2) {= signals[(i + 3) % 4]-- =}
		}
	}
}

patient action send_start_0, send_stop_0, send_start_1, send_stop_1, send_start_2, send_stop_2, send_start_3, send_stop_3;
par {
::	UpperLayers(PACKETS)
::	relabel { send_start, send_stop } by { send_start_0, send_stop_0 } Node(0)
::	relabel { send_start, send_stop } by { send_start_0, send_stop_0 } SharedMedium(0)
::	relabel { send_start, send_stop } by { send_start_1, send_stop_1 } Node(1)
::	relabel { send_start, send_stop } by { send_start_1, send_stop_1 } SharedMedium(1)
::	relabel { send_start, send_stop } by { send_start_2, send_stop_2 } Node(2)
::	relabel { send_start, send_stop } by { send_start_2, send_stop_2 } SharedMedium(2)
::	relabel { send_start, send_stop } by { send_start_3, send_stop_3 } Node(3)
::	relabel { send_start, send_stop } by { send_start_3, send_stop_3 } SharedMedium(3)
}
