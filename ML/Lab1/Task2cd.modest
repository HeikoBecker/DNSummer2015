/*
    c) CMD: mosta Task2cd.modest -X -S -E -O out.dot -D png out.png --no-invariants -F
            
    d) CMD: modes Task2cd.modest -R Uniform -N 5000
    
        T_ARR := Time to next arrival (in seconds)
        I_TRA := Traffic intensity
        QL(t) := Queue length at time t
        
        +-------+-------+---------+----------+----------+----------+-----------+
        | T_ARR | I_TRA | QL(100) | QL (200) | QL (400) | QL (800) | QL (1600) | 
        +-------+-------+---------+----------+----------+----------+-----------+
        |   4.0 |   50% |    0.47 |     0.49 |     0.57 |     0.46 |      0.50 | 
        |   2.5 |   80% |    2.60 |     2.91 |     3.07 |     3.16 |      3.28 | 
        |   2.2 |   90% |    4.61 |     6.03 |     7.49 |     8.43 |      8.92 | 
        |   2.1 |   95% |    5.55 |     7.45 |    10.12 |    14.11 |     16.36 |
        |   2.0 |  100% |    6.31 |     9.73 |    14.89 |    21.84 |     31.11 |
        |   1.6 |  125% |   15.47 |    29.09 |    50.80 |   103.21 |    203.92 | 
        +-------+-------+---------+----------+----------+----------+-----------+
        
        The reason for the different results to Part ab is due to the fact that in this
        probabilistic scenario, the idle times of the worker are larger than previously.
        In the previous task, the request came uniformly distributed and thereby the worker
        could be busy all the time.
    
        Except for added distributions, modelling is equivalent to Task2ab.
        Please see Task2ab.modest for modelling information.
*/

action request, busy;

const real T_ARRIVAL = 4.0;

int queue_length = 0;

property ExLength100 = Xmax(queue_length | time == 100);
property ExLength200 = Xmax(queue_length | time == 200);
property ExLength400 = Xmax(queue_length | time == 400);
property ExLength800 = Xmax(queue_length | time == 800);
property ExLength1600 = Xmax(queue_length | time == 1600);

process Worker() {
    when (queue_length > 0) delay(Exp(1/2)) busy {= queue_length = queue_length - 1 =}; Worker()
}

process Queue() {
    delay(Exp(1/T_ARRIVAL)) request {= queue_length = queue_length + 1 =}; Queue()
}

par {
:: Worker()
:: Queue()
}
