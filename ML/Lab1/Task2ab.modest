/*
    a) CMD: mosta Task2ab.modest -X -S -E -O out.dot -D png out.png --no-invariants -F
            
    b) CMD: modes Task2ab.modest -R Uniform
    
        T_ARR := Time to next arrival (in seconds)
        I_TRA := Traffic intensity
        QL(t) := Queue length at time t
        
        +-------+-------+---------+----------+----------+----------+-----------+
        | T_ARR | I_TRA | QL(100) | QL (200) | QL (400) | QL (800) | QL (1600) | 
        +-------+-------+---------+----------+----------+----------+-----------+
        |   4.0 |   50% |       0 |        0 |        0 |        0 |         0 | 
        |   2.5 |   80% |       0 |        0 |        0 |        0 |         0 | 
        |   2.2 |   90% |       0 |        0 |        0 |        0 |         0 | 
        |   2.1 |   95% |       0 |        0 |        0 |        0 |         0 |
        |   2.0 |  100% |       0 |        0 |        0 |        0 |         0 |
        |   1.6 |  125% |      12 |       25 |       50 |      100 |       200 | 
        |   1.0 |  200% |      50 |      100 |      200 |      400 |       800 | 
        +-------+-------+---------+----------+----------+----------+-----------+
        
        This result makes sense, as the model is not probabilistic. As long as the traffic intesity is below 1, the queue will not increase as all requests are handled timely.
*/

action request, busy;

const real T_ARRIVAL = 2.0;

int queue_length = 0;

property ExLength100 = Xmax(queue_length | time == 100);
property ExLength200 = Xmax(queue_length | time == 200);
property ExLength400 = Xmax(queue_length | time == 400);
property ExLength800 = Xmax(queue_length | time == 800);
property ExLength1600 = Xmax(queue_length | time == 1600);

process Worker() {
    when (queue_length > 0) delay(2) busy {= queue_length = queue_length - 1 =}; Worker()
}

process Queue() {
    delay(T_ARRIVAL) request {= queue_length = queue_length + 1 =}; Queue()
}

par {
:: Worker()
:: Queue()
}
