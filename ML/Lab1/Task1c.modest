/*
    c) CMD: modes Task1c.modest -S ASAP
    
    n       := number of questions asked in a row
    ign     := number of ignores in a row
    total   := total number of questions asked in a run
    
    Note: We are using the ASAP schedule to eliminate temporal non-determinism. 
    This advises the simulator to execute actions as soon as possible. As we have placed
    proper delays and want all other actions to be executed immediately, this is valid.
    
    c)  ExTimeToLeave: 570.37s
        ExTimeToLeaveOr5Q: 409.14s

    As time unit, we use seconds. 
    Therefore Exp(1/300) is equivalent to an exponentially distributed 5 Minutes 
    delay.
    Except for added delays, modelling equivalent to Task1ab.
    Please see Task1ab.modest for modelling information.
*/

int ign = 0;
int n = 0;
int total = 0;
bool leave_hall;

action raise_hand, ack_q, ign_q;
action ask_q, stop_asking, answer_q;

// Task c)
property ExTimeToLeave = Xmax(time | leave_hall);
property ExTimeToLeaveOr5Q = Xmax(time | (leave_hall || total >= 5));

process Student() {
    alt {
    :: when(ign < 3) raise_hand;
        alt {
        :: ack_q {= n = 0, ign = 0 =};
            do {
                palt {
                :1: ask_q; answer_q {= n = n + 1, total = total + 1 =}
                :n: stop_asking; delay(Exponential(1/300)) break //after stopping there is a delay
                }
            } 
        :: ign_q {= ign = ign+1 =} 
        }; Student()
    :: when(ign >= 3) {= leave_hall = true =}
    }
}

process Lecturer() {
    raise_hand;
    palt {
    :1: ack_q; 
        do {
            :: ask_q; delay(Uniform(30, 120)) answer_q //answering a question takes uniformly between 30 and 120 seconds
            :: stop_asking; break
        }
    :3: ign_q
    }; Lecturer()
}

par {
:: Student()
:: Lecturer()
}
